{"ast":null,"code":"var _jsxFileName = \"/Users/nikp/development/fullstack_app/client/src/App.js\";\n// /client/App.js\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    this.getDataFromDb = () => {\n      fetch('http://localhost:3001/api/getData').then(data => data.json()).then(res => this.setState({\n        data: res.data\n      }));\n    };\n\n    this.putDataToDB = message => {\n      let currentIds = this.state.data.map(data => data.id);\n      let idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post('http://localhost:3001/api/putData', {\n        id: idToBeAdded,\n        message: message\n      });\n    };\n\n    this.deleteFromDB = idTodelete => {\n      parseInt(idTodelete);\n      let objIdToDelete = null;\n      this.state.data.forEach(dat => {\n        if (dat.id == idTodelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n      axios.delete('http://localhost:3001/api/deleteData', {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    this.updateDB = (idToUpdate, updateToApply) => {\n      let objIdToUpdate = null;\n      parseInt(idToUpdate);\n      this.state.data.forEach(dat => {\n        if (dat.id == idToUpdate) {\n          objIdToUpdate = dat._id;\n        }\n      });\n      axios.post('http://localhost:3001/api/updateData', {\n        id: objIdToUpdate,\n        update: {\n          message: updateToApply\n        }\n      });\n    };\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const data = this.state.data;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map(dat => React.createElement(\"li\", {\n      style: {\n        padding: '10px'\n      },\n      key: data.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \" id: \"), \" \", dat.id, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \" data: \"), dat.message))), React.createElement(\"div\", {\n      style: {\n        padding: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onChange: e => this.setState({\n        message: e.target.value\n      }),\n      placeholder: \"add something in the database\",\n      style: {\n        width: '200px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.putDataToDB(this.state.message),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"ADD\")), React.createElement(\"div\", {\n      style: {\n        padding: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: '200px'\n      },\n      onChange: e => this.setState({\n        idToDelete: e.target.value\n      }),\n      placeholder: \"put id of item to delete here\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.deleteFromDB(this.state.idToDelete),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"DELETE\")), React.createElement(\"div\", {\n      style: {\n        padding: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: '200px'\n      },\n      onChange: e => this.setState({\n        idToUpdate: e.target.value\n      }),\n      placeholder: \"id of item to update here\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: '200px'\n      },\n      onChange: e => this.setState({\n        updateToApply: e.target.value\n      }),\n      placeholder: \"put new value of the item here\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.updateDB(this.state.idToUpdate, this.state.updateToApply),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"UPDATE\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nikp/development/fullstack_app/client/src/App.js"],"names":["React","Component","axios","App","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","putDataToDB","currentIds","map","idToBeAdded","includes","post","deleteFromDB","idTodelete","parseInt","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","length","padding","color","e","target","value","width"],"mappings":"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","sourcesContent":["// /client/App.js\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass App extends Component {\n    // initialize our state\n    state = {\n        data: [],\n        id: 0,\n        message: null,\n        intervalIsSet: false,\n        idToDelete: null,\n        idToUpdate: null,\n        objectToUpdate: null,\n    };\n\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has\n    // changed and implement those changes into our UI\n    componentDidMount() {\n        this.getDataFromDb();\n        if (!this.state.intervalIsSet) {\n            let interval = setInterval(this.getDataFromDb, 1000);\n            this.setState({ intervalIsSet: interval });\n        }\n    }\n\n    // never let a process live forever\n    // always kill a process everytime we are done using it\n    componentWillUnmount() {\n        if (this.state.intervalIsSet) {\n            clearInterval(this.state.intervalIsSet);\n            this.setState({ intervalIsSet: null });\n        }\n    }\n\n    // just a note, here, in the front end, we use the id key of our data object\n    // in order to identify which we want to Update or delete.\n    // for our back end, we use the object id assigned by MongoDB to modify\n    // data base entries\n\n    // our first get method that uses our backend api to\n    // fetch data from our data base\n    getDataFromDb = () => {\n        fetch('http://localhost:3001/api/getData')\n            .then((data) => data.json())\n            .then((res) => this.setState({ data: res.data }));\n    };\n\n    // our put method that uses our backend api\n    // to create new query into our data base\n    putDataToDB = (message) => {\n        let currentIds = this.state.data.map((data) => data.id);\n        let idToBeAdded = 0;\n        while (currentIds.includes(idToBeAdded)) {\n            ++idToBeAdded;\n        }\n\n        axios.post('http://localhost:3001/api/putData', {\n            id: idToBeAdded,\n            message: message,\n        });\n    };\n\n    // our delete method that uses our backend api\n    // to remove existing database information\n    deleteFromDB = (idTodelete) => {\n        parseInt(idTodelete);\n        let objIdToDelete = null;\n        this.state.data.forEach((dat) => {\n            if (dat.id == idTodelete) {\n                objIdToDelete = dat._id;\n            }\n        });\n\n        axios.delete('http://localhost:3001/api/deleteData', {\n            data: {\n                id: objIdToDelete,\n            },\n        });\n    };\n\n    // our update method that uses our backend api\n    // to overwrite existing data base information\n    updateDB = (idToUpdate, updateToApply) => {\n        let objIdToUpdate = null;\n        parseInt(idToUpdate);\n        this.state.data.forEach((dat) => {\n            if (dat.id == idToUpdate) {\n                objIdToUpdate = dat._id;\n            }\n        });\n\n        axios.post('http://localhost:3001/api/updateData', {\n            id: objIdToUpdate,\n            update: { message: updateToApply },\n        });\n    };\n\n    // here is our UI\n    // it is easy to understand their functions when you\n    // see them render into our screen\n    render() {\n        const { data } = this.state;\n        return (\n            <div>\n                <ul>\n                    {data.length <= 0\n                        ? 'NO DB ENTRIES YET'\n                        : data.map((dat) => (\n                            <li style={{ padding: '10px' }} key={data.message}>\n                                <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n                                <span style={{ color: 'gray' }}> data: </span>\n                                {dat.message}\n                            </li>\n                        ))}\n                </ul>\n                <div style={{ padding: '10px' }}>\n                    <input\n                        type=\"text\"\n                        onChange={(e) => this.setState({ message: e.target.value })}\n                        placeholder=\"add something in the database\"\n                        style={{ width: '200px' }}\n                    />\n                    <button onClick={() => this.putDataToDB(this.state.message)}>\n                        ADD\n                    </button>\n                </div>\n                <div style={{ padding: '10px' }}>\n                    <input\n                        type=\"text\"\n                        style={{ width: '200px' }}\n                        onChange={(e) => this.setState({ idToDelete: e.target.value })}\n                        placeholder=\"put id of item to delete here\"\n                    />\n                    <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n                        DELETE\n                    </button>\n                </div>\n                <div style={{ padding: '10px' }}>\n                    <input\n                        type=\"text\"\n                        style={{ width: '200px' }}\n                        onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n                        placeholder=\"id of item to update here\"\n                    />\n                    <input\n                        type=\"text\"\n                        style={{ width: '200px' }}\n                        onChange={(e) => this.setState({ updateToApply: e.target.value })}\n                        placeholder=\"put new value of the item here\"\n                    />\n                    <button\n                        onClick={() =>\n                            this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n                        }\n                    >\n                        UPDATE\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}